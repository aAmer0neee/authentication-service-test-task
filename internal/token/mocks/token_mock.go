// Code generated by MockGen. DO NOT EDIT.
// Source: token.go

// Package token_mock is a generated GoMock package.
package token_mock

import (
	reflect "reflect"

	domain "github.com/aAmer0neee/authentication-service-test-task/internal/domain"
	token "github.com/aAmer0neee/authentication-service-test-task/internal/token"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// CompareBcryptTokens mocks base method.
func (m *MockTokenService) CompareBcryptTokens(hash, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareBcryptTokens", hash, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareBcryptTokens indicates an expected call of CompareBcryptTokens.
func (mr *MockTokenServiceMockRecorder) CompareBcryptTokens(hash, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareBcryptTokens", reflect.TypeOf((*MockTokenService)(nil).CompareBcryptTokens), hash, token)
}

// GenerateAccess mocks base method.
func (m *MockTokenService) GenerateAccess(user domain.User, pairId uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAccess", user, pairId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAccess indicates an expected call of GenerateAccess.
func (mr *MockTokenServiceMockRecorder) GenerateAccess(user, pairId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAccess", reflect.TypeOf((*MockTokenService)(nil).GenerateAccess), user, pairId)
}

// GenerateBcryptToken mocks base method.
func (m *MockTokenService) GenerateBcryptToken(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateBcryptToken", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateBcryptToken indicates an expected call of GenerateBcryptToken.
func (mr *MockTokenServiceMockRecorder) GenerateBcryptToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateBcryptToken", reflect.TypeOf((*MockTokenService)(nil).GenerateBcryptToken), token)
}

// GenerateRefresh mocks base method.
func (m *MockTokenService) GenerateRefresh() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefresh")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateRefresh indicates an expected call of GenerateRefresh.
func (mr *MockTokenServiceMockRecorder) GenerateRefresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefresh", reflect.TypeOf((*MockTokenService)(nil).GenerateRefresh))
}

// Validate mocks base method.
func (m *MockTokenService) Validate(user domain.User) (*token.AccessClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", user)
	ret0, _ := ret[0].(*token.AccessClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenServiceMockRecorder) Validate(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenService)(nil).Validate), user)
}
